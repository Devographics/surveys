{
  "dataAPI": {
    "surveys": {
      "state_of_react": {
        "react2024": {
          "main_apis": {
            "main_apis_pain_points": {
              "id": "main_apis_pain_points",
              "comments": {
                "currentEdition": {
                  "count": 3
                }
              },
              "freeform": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 10,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 1081,
                    "percentageSurvey": 13.74,
                    "total": 7870
                  },
                  "buckets": [
                    {
                      "count": 316,
                      "id": "forwardref",
                      "percentageQuestion": 29.23,
                      "percentageSurvey": 4.02,
                      "entity": {
                        "name": "`forwardRef`",
                        "nameHtml": "<code>forwardRef</code>",
                        "nameClean": "forwardRef",
                        "id": "forwardref",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const SomeComponent = forwardRef(render)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SomeComponent</span> = <span class=\"hljs-title function_\">forwardRef</span>(render)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/forwardRef"
                        }
                      }
                    },
                    {
                      "count": 206,
                      "id": "memo",
                      "percentageQuestion": 19.06,
                      "percentageSurvey": 2.62,
                      "entity": {
                        "name": "`memo`",
                        "nameHtml": "<code>memo</code>",
                        "nameClean": "memo",
                        "description": "`memo` lets you skip re-rendering a component when its props are unchanged.\n",
                        "descriptionHtml": "<code>memo</code> lets you skip re-rendering a component when its props are unchanged.\n",
                        "descriptionClean": "memo lets you skip re-rendering a component when its props are unchanged.",
                        "id": "memo",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const MemoizedComponent = memo(SomeComponent, arePropsEqual?)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MemoizedComponent</span> = <span class=\"hljs-title function_\">memo</span>(<span class=\"hljs-title class_\">SomeComponent</span>, arePropsEqual?)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/memo"
                        },
                        "resources": [
                          {
                            "url": "https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/",
                            "title": "A (Mostly) Complete Guide to React Rendering Behavior"
                          },
                          {
                            "url": "https://overreacted.io/before-you-memo/",
                            "title": "Before You memo()"
                          }
                        ]
                      }
                    },
                    {
                      "count": 192,
                      "id": "react_act",
                      "percentageQuestion": 17.76,
                      "percentageSurvey": 2.44,
                      "entity": {
                        "name": "`act`\n",
                        "nameHtml": "<code>act</code>\n",
                        "nameClean": "act",
                        "description": "`act` is a test helper to apply pending React updates before making assertions.\n",
                        "descriptionHtml": "<code>act</code> is a test helper to apply pending React updates before making assertions.\n",
                        "descriptionClean": "act is a test helper to apply pending React updates before making assertions.",
                        "id": "react_act",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "it ('renders with button disabled', async () => {\n  await act(async () => {\n    root.render(<TestComponent />)\n  });\n  expect(container.querySelector('button')).toBeDisabled();\n});\n",
                          "codeHighlighted": "it (<span class=\"hljs-string\">&#x27;renders with button disabled&#x27;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-keyword\">async</span> () =&gt; {\n    root.<span class=\"hljs-title function_\">render</span>(&lt;TestComponent /&gt;)\n  });\n  <span class=\"hljs-title function_\">expect</span>(container.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;button&#x27;</span>)).<span class=\"hljs-title function_\">toBeDisabled</span>();\n});"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/act"
                        }
                      }
                    },
                    {
                      "count": 106,
                      "id": "context_api",
                      "percentageQuestion": 9.81,
                      "percentageSurvey": 1.35,
                      "entity": {
                        "name": "Context API",
                        "nameClean": "Context API",
                        "id": "context_api",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 101,
                      "id": "excessive_complexity",
                      "percentageQuestion": 9.34,
                      "percentageSurvey": 1.28,
                      "entity": {
                        "name": "Excessive complexity",
                        "nameClean": "Excessive complexity",
                        "description": "Too much complexity",
                        "descriptionClean": "Too much complexity",
                        "id": "excessive_complexity",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 100,
                      "id": "strictmode",
                      "percentageQuestion": 9.25,
                      "percentageSurvey": 1.27,
                      "entity": {
                        "name": "`<StrictMode>`\n",
                        "nameHtml": "<code>&lt;StrictMode&gt;</code>\n",
                        "nameClean": "StrictMode",
                        "description": "`<StrictMode>` lets you find common bugs in your components early during development.\n",
                        "descriptionHtml": "<code>&lt;StrictMode&gt;</code> lets you find common bugs in your components early during development.\n",
                        "descriptionClean": "StrictMode lets you find common bugs in your components early during development.",
                        "id": "strictmode",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "<StrictMode>\n  <App />\n</StrictMode>\n",
                          "codeHighlighted": "&lt;<span class=\"hljs-title class_\">StrictMode</span>&gt;\n  &lt;App /&gt;\n&lt;/<span class=\"hljs-title class_\">StrictMode</span>&gt;"
                        }
                      }
                    },
                    {
                      "count": 45,
                      "id": "context_api_rerendering",
                      "percentageQuestion": 4.16,
                      "percentageSurvey": 0.57,
                      "entity": {
                        "name": "Excessive context re-renderings",
                        "nameClean": "Excessive context re-renderings",
                        "id": "context_api_rerendering",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 40,
                      "id": "lazy",
                      "percentageQuestion": 3.7,
                      "percentageSurvey": 0.51,
                      "entity": {
                        "name": "`lazy` ",
                        "nameHtml": "<code>lazy</code> ",
                        "nameClean": "lazy ",
                        "id": "lazy",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const SomeComponent = lazy(load)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SomeComponent</span> = <span class=\"hljs-title function_\">lazy</span>(load)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/lazy"
                        }
                      }
                    },
                    {
                      "count": 40,
                      "id": "testing",
                      "percentageQuestion": 3.7,
                      "percentageSurvey": 0.51,
                      "entity": {
                        "name": "Testing",
                        "nameClean": "Testing",
                        "id": "testing",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 39,
                      "id": "error_handling",
                      "percentageQuestion": 3.61,
                      "percentageSurvey": 0.5,
                      "entity": {
                        "name": "Error handling",
                        "nameClean": "Error handling",
                        "id": "error_handling",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 6789,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 86.26
                    },
                    {
                      "count": 684,
                      "id": "other_answers",
                      "percentageQuestion": 63.35,
                      "percentageSurvey": 8.72,
                      "groupedBuckets": [
                        {
                          "count": 280,
                          "id": "overlimit_answers",
                          "percentageQuestion": 25.93,
                          "percentageSurvey": 3.57
                        },
                        {
                          "count": 114,
                          "id": "cutoff_answers",
                          "percentageQuestion": 10.59,
                          "percentageSurvey": 1.47
                        },
                        {
                          "count": 290,
                          "id": "no_match",
                          "percentageQuestion": 26.83,
                          "percentageSurvey": 3.68
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}