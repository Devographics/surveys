{
  "dataAPI": {
    "surveys": {
      "state_of_react": {
        "react2024": {
          "reading_list": {
            "reading_list": {
              "id": "reading_list",
              "responses": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 20,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 1946,
                    "percentageSurvey": 24.73,
                    "total": 7870
                  },
                  "buckets": [
                    {
                      "count": 777,
                      "id": "cache",
                      "percentageQuestion": 39.93,
                      "percentageSurvey": 9.87,
                      "entity": {
                        "name": "React `cache`",
                        "nameHtml": "React <code>cache</code>",
                        "nameClean": "React cache",
                        "id": "cache",
                        "entityType": "feature",
                        "homepage": {
                          "url": "https://nextjs.org/docs/app/building-your-application/data-fetching/caching#react-cache"
                        }
                      }
                    },
                    {
                      "count": 674,
                      "id": "use_hook",
                      "percentageQuestion": 34.64,
                      "percentageSurvey": 8.56,
                      "entity": {
                        "name": "`use()`\n",
                        "nameHtml": "<code>use()</code>\n",
                        "nameClean": "use()",
                        "id": "use_hook",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const value = use(resource);\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">use</span>(resource);"
                        },
                        "homepage": {
                          "url": "https://github.com/reactjs/rfcs/pull/229"
                        }
                      }
                    },
                    {
                      "count": 621,
                      "id": "useoptimistic",
                      "percentageQuestion": 31.91,
                      "percentageSurvey": 7.89,
                      "entity": {
                        "name": "`useOptimistic`\n",
                        "nameHtml": "<code>useOptimistic</code>\n",
                        "nameClean": "useOptimistic",
                        "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.\n",
                        "descriptionHtml": "<code>useOptimistic</code> is a React Hook that lets you optimistically update the UI.\n",
                        "descriptionClean": "useOptimistic is a React Hook that lets you optimistically update the UI.",
                        "id": "useoptimistic",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const [optimisticState, addOptimistic] = useOptimistic(state, updateFn);\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> [optimisticState, addOptimistic] = <span class=\"hljs-title function_\">useOptimistic</span>(state, updateFn);"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useOptimistic"
                        }
                      }
                    },
                    {
                      "count": 619,
                      "id": "profiler",
                      "percentageQuestion": 31.81,
                      "percentageSurvey": 7.87,
                      "entity": {
                        "name": "`<Profiler>`\n",
                        "nameHtml": "<code>&lt;Profiler&gt;</code>\n",
                        "nameClean": "Profiler",
                        "description": "`<Profiler>` lets you measure rendering performance of a React tree programmatically.\n",
                        "descriptionHtml": "<code>&lt;Profiler&gt;</code> lets you measure rendering performance of a React tree programmatically.\n",
                        "descriptionClean": "Profiler lets you measure rendering performance of a React tree programmatically.",
                        "id": "profiler",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "<Profiler id=\"App\" onRender={onRender}>\n  <App />\n</Profiler>\n",
                          "codeHighlighted": "&lt;<span class=\"hljs-title class_\">Profiler</span> id=<span class=\"hljs-string\">&quot;App&quot;</span> onRender={onRender}&gt;\n  &lt;App /&gt;\n&lt;/<span class=\"hljs-title class_\">Profiler</span>&gt;"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/Profiler"
                        }
                      }
                    },
                    {
                      "count": 612,
                      "id": "taint_api",
                      "percentageQuestion": 31.45,
                      "percentageSurvey": 7.78,
                      "entity": {
                        "name": "Taint API",
                        "nameClean": "Taint API",
                        "id": "taint_api",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "taintObjectReference(message, object);\ntaintUniqueValue(errMessage, lifetime, value)\n",
                          "codeHighlighted": "<span class=\"hljs-title function_\">taintObjectReference</span>(message, object);\n<span class=\"hljs-title function_\">taintUniqueValue</span>(errMessage, lifetime, value)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/experimental_taintObjectReference"
                        }
                      }
                    },
                    {
                      "count": 584,
                      "id": "usedeferredvalue",
                      "percentageQuestion": 30.01,
                      "percentageSurvey": 7.42,
                      "entity": {
                        "name": "`useDeferredValue`\n",
                        "nameHtml": "<code>useDeferredValue</code>\n",
                        "nameClean": "useDeferredValue",
                        "description": "`useDeferredValue` is a React Hook that lets you defer updating a part of the UI.\n",
                        "descriptionHtml": "<code>useDeferredValue</code> is a React Hook that lets you defer updating a part of the UI.\n",
                        "descriptionClean": "useDeferredValue is a React Hook that lets you defer updating a part of the UI.",
                        "id": "usedeferredvalue",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const deferredValue = useDeferredValue(value)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> deferredValue = <span class=\"hljs-title function_\">useDeferredValue</span>(value)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useDeferredValue"
                        }
                      }
                    },
                    {
                      "count": 551,
                      "id": "starttransition",
                      "percentageQuestion": 28.31,
                      "percentageSurvey": 7,
                      "entity": {
                        "name": "`startTransition`",
                        "nameHtml": "<code>startTransition</code>",
                        "nameClean": "startTransition",
                        "description": "`startTransition` lets you update the state without blocking the UI.\n",
                        "descriptionHtml": "<code>startTransition</code> lets you update the state without blocking the UI.\n",
                        "descriptionClean": "startTransition lets you update the state without blocking the UI.",
                        "id": "starttransition",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "startTransition(scope)\n",
                          "codeHighlighted": "<span class=\"hljs-title function_\">startTransition</span>(scope)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/startTransition"
                        }
                      }
                    },
                    {
                      "count": 524,
                      "id": "usesyncexternalstore",
                      "percentageQuestion": 26.93,
                      "percentageSurvey": 6.66,
                      "entity": {
                        "name": "`useSyncExternalStore`\n",
                        "nameHtml": "<code>useSyncExternalStore</code>\n",
                        "nameClean": "useSyncExternalStore",
                        "description": "`useSyncExternalStore` is a React Hook that lets you subscribe to an external store.\n",
                        "descriptionHtml": "<code>useSyncExternalStore</code> is a React Hook that lets you subscribe to an external store.\n",
                        "descriptionClean": "useSyncExternalStore is a React Hook that lets you subscribe to an external store.",
                        "id": "usesyncexternalstore",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> snapshot = <span class=\"hljs-title function_\">useSyncExternalStore</span>(subscribe, getSnapshot, getServerSnapshot?)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useSyncExternalStore"
                        }
                      }
                    },
                    {
                      "count": 504,
                      "id": "useformstatus",
                      "percentageQuestion": 25.9,
                      "percentageSurvey": 6.4,
                      "entity": {
                        "name": "useFormStatus",
                        "nameClean": "useFormStatus",
                        "id": "useformstatus",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "const { pending, data, method, action } = useFormStatus();\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> { pending, data, method, action } = <span class=\"hljs-title function_\">useFormStatus</span>();"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react-dom/hooks/useFormStatus"
                        }
                      }
                    },
                    {
                      "count": 502,
                      "id": "usetransition",
                      "percentageQuestion": 25.8,
                      "percentageSurvey": 6.38,
                      "entity": {
                        "name": "`useTransition`\n",
                        "nameHtml": "<code>useTransition</code>\n",
                        "nameClean": "useTransition",
                        "description": "`useTransition` is a React Hook that lets you update the state without blocking the UI.\n",
                        "descriptionHtml": "<code>useTransition</code> is a React Hook that lets you update the state without blocking the UI.\n",
                        "descriptionClean": "useTransition is a React Hook that lets you update the state without blocking the UI.",
                        "id": "usetransition",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const [isPending, startTransition] = useTransition()\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> [isPending, startTransition] = <span class=\"hljs-title function_\">useTransition</span>()"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useTransition"
                        }
                      }
                    },
                    {
                      "count": 493,
                      "id": "useactionstate",
                      "percentageQuestion": 25.33,
                      "percentageSurvey": 6.26,
                      "entity": {
                        "name": "`useActionState` (formerly `useFormState`)\n",
                        "nameHtml": "<code>useActionState</code> (formerly <code>useFormState</code>)\n",
                        "nameClean": "useActionState (formerly useFormState)",
                        "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.\n",
                        "descriptionHtml": "<code>useActionState</code> is a Hook that allows you to update state based on the result of a form action.\n",
                        "descriptionClean": "useActionState is a Hook that allows you to update state based on the result of a form action.",
                        "id": "useactionstate",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const [state, formAction] = useActionState(fn, initialState, permalink?);\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> [state, formAction] = <span class=\"hljs-title function_\">useActionState</span>(fn, initialState, permalink?);"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useActionState"
                        }
                      }
                    },
                    {
                      "count": 441,
                      "id": "uselayouteffect",
                      "percentageQuestion": 22.66,
                      "percentageSurvey": 5.6,
                      "entity": {
                        "name": "`useLayoutEffect`\n",
                        "nameHtml": "<code>useLayoutEffect</code>\n",
                        "nameClean": "useLayoutEffect",
                        "id": "useLayoutEffect",
                        "entityType": "feature"
                      }
                    },
                    {
                      "count": 389,
                      "id": "react_act",
                      "percentageQuestion": 19.99,
                      "percentageSurvey": 4.94,
                      "entity": {
                        "name": "`act`\n",
                        "nameHtml": "<code>act</code>\n",
                        "nameClean": "act",
                        "description": "`act` is a test helper to apply pending React updates before making assertions.\n",
                        "descriptionHtml": "<code>act</code> is a test helper to apply pending React updates before making assertions.\n",
                        "descriptionClean": "act is a test helper to apply pending React updates before making assertions.",
                        "id": "react_act",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "it ('renders with button disabled', async () => {\n  await act(async () => {\n    root.render(<TestComponent />)\n  });\n  expect(container.querySelector('button')).toBeDisabled();\n});\n",
                          "codeHighlighted": "it (<span class=\"hljs-string\">&#x27;renders with button disabled&#x27;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-keyword\">async</span> () =&gt; {\n    root.<span class=\"hljs-title function_\">render</span>(&lt;TestComponent /&gt;)\n  });\n  <span class=\"hljs-title function_\">expect</span>(container.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;button&#x27;</span>)).<span class=\"hljs-title function_\">toBeDisabled</span>();\n});"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/act"
                        }
                      }
                    },
                    {
                      "count": 383,
                      "id": "effector",
                      "percentageQuestion": 19.68,
                      "percentageSurvey": 4.87,
                      "entity": {
                        "name": "Effector",
                        "nameClean": "Effector",
                        "description": "Reactive state manager",
                        "descriptionClean": "Reactive state manager",
                        "id": "effector",
                        "entityType": "library",
                        "homepage": {
                          "url": "https://effector.dev"
                        },
                        "npm": {
                          "url": "https://www.npmjs.com/package/effector"
                        }
                      }
                    },
                    {
                      "count": 368,
                      "id": "useid",
                      "percentageQuestion": 18.91,
                      "percentageSurvey": 4.68,
                      "entity": {
                        "name": "`useId`\n",
                        "nameHtml": "<code>useId</code>\n",
                        "nameClean": "useId",
                        "description": "`useId` is a React Hook for generating unique IDs that can be passed to accessibility attributes.\n",
                        "descriptionHtml": "<code>useId</code> is a React Hook for generating unique IDs that can be passed to accessibility attributes.\n",
                        "descriptionClean": "useId is a React Hook for generating unique IDs that can be passed to accessibility attributes.",
                        "id": "useid",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const id = useId()\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-title function_\">useId</span>()"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useId"
                        }
                      }
                    },
                    {
                      "count": 353,
                      "id": "server_actions",
                      "percentageQuestion": 18.14,
                      "percentageSurvey": 4.49,
                      "entity": {
                        "name": "Server Actions",
                        "nameClean": "Server Actions",
                        "id": "server_actions",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "export default function ServerComponent() {\n  async function myAction() {\n    'use server'\n    // ...\n  }\n}\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ServerComponent</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myAction</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-string\">&#x27;use server&#x27;</span>\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}"
                        },
                        "homepage": {
                          "url": "https://nextjs.org/docs/app/api-reference/functions/server-actions"
                        }
                      }
                    },
                    {
                      "count": 342,
                      "id": "react_server_components",
                      "percentageQuestion": 17.57,
                      "percentageSurvey": 4.35,
                      "entity": {
                        "name": "React Server Components",
                        "nameClean": "React Server Components",
                        "id": "react_server_components",
                        "entityType": "feature",
                        "homepage": {
                          "url": "https://nextjs.org/docs/getting-started/react-essentials#server-components"
                        },
                        "resources": [
                          {
                            "url": "https://www.joshwcomeau.com/react/server-components/",
                            "title": "Making Sense of React Server Components"
                          }
                        ]
                      }
                    },
                    {
                      "count": 338,
                      "id": "createportal",
                      "percentageQuestion": 17.37,
                      "percentageSurvey": 4.29,
                      "entity": {
                        "name": "`createPortal`",
                        "nameHtml": "<code>createPortal</code>",
                        "nameClean": "createPortal",
                        "id": "createPortal",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "<div>\n  <SomeComponent />\n  {createPortal(children, domNode, key?)}\n</div>\n",
                          "codeHighlighted": "&lt;div&gt;\n  &lt;SomeComponent /&gt;\n  {<span class=\"hljs-title function_\">createPortal</span>(children, domNode, key?)}\n&lt;/div&gt;"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react-dom/createPortal"
                        }
                      }
                    },
                    {
                      "count": 298,
                      "id": "lazy",
                      "percentageQuestion": 15.31,
                      "percentageSurvey": 3.79,
                      "entity": {
                        "name": "`lazy` ",
                        "nameHtml": "<code>lazy</code> ",
                        "nameClean": "lazy ",
                        "id": "lazy",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const SomeComponent = lazy(load)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SomeComponent</span> = <span class=\"hljs-title function_\">lazy</span>(load)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/lazy"
                        }
                      }
                    },
                    {
                      "count": 261,
                      "id": "suspense",
                      "percentageQuestion": 13.41,
                      "percentageSurvey": 3.32,
                      "entity": {
                        "name": "`<Suspense>`\n",
                        "nameHtml": "<code>&lt;Suspense&gt;</code>\n",
                        "nameClean": "Suspense",
                        "id": "suspense",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "<Suspense fallback={<Loading />}>\n  <SomeComponent />\n</Suspense>\n",
                          "codeHighlighted": "&lt;<span class=\"hljs-title class_\">Suspense</span> fallback={&lt;Loading /&gt;}&gt;\n  &lt;SomeComponent /&gt;\n&lt;/<span class=\"hljs-title class_\">Suspense</span>&gt;"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/Suspense"
                        }
                      }
                    },
                    {
                      "count": 49,
                      "id": "cutoff_answers",
                      "percentageQuestion": 2.52,
                      "percentageSurvey": 0.63
                    },
                    {
                      "count": 5924,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 75.27
                    },
                    {
                      "count": 14976,
                      "id": "overlimit_answers",
                      "percentageQuestion": 769.5,
                      "percentageSurvey": 190.27
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}