{
  "dataAPI": {
    "surveys": {
      "state_of_react": {
        "react2024": {
          "hooks": {
            "hooks_pain_points": {
              "id": "hooks_pain_points",
              "freeform": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 10,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 722,
                    "percentageSurvey": 9.17,
                    "total": 7870
                  },
                  "buckets": [
                    {
                      "count": 225,
                      "id": "useeffect",
                      "percentageQuestion": 31.16,
                      "percentageSurvey": 2.86,
                      "entity": {
                        "name": "`useEffect`\n",
                        "nameHtml": "<code>useEffect</code>\n",
                        "nameClean": "useEffect",
                        "description": "`useEffect` is a React Hook that lets you synchronize a component with an external system.\n",
                        "descriptionHtml": "<code>useEffect</code> is a React Hook that lets you synchronize a component with an external system.\n",
                        "descriptionClean": "useEffect is a React Hook that lets you synchronize a component with an external system.",
                        "id": "useeffect",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "useEffect(setup, dependencies?)\n",
                          "codeHighlighted": "<span class=\"hljs-title function_\">useEffect</span>(setup, dependencies?)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useEffect"
                        },
                        "resources": [
                          {
                            "url": "https://blog.logrocket.com/useeffect-react-hook-complete-guide/",
                            "title": "A complete guide to the useEffect React Hook"
                          }
                        ]
                      }
                    },
                    {
                      "count": 123,
                      "id": "dependency_arrays",
                      "percentageQuestion": 17.04,
                      "percentageSurvey": 1.56,
                      "entity": {
                        "name": "Dependency arrays",
                        "nameClean": "Dependency arrays",
                        "description": "Specifying the list of variables `useEffect` depends on.",
                        "descriptionHtml": "Specifying the list of variables <code>useEffect</code> depends on.",
                        "descriptionClean": "Specifying the list of variables useEffect depends on.",
                        "id": "dependency_arrays",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 94,
                      "id": "usecallback",
                      "percentageQuestion": 13.02,
                      "percentageSurvey": 1.19,
                      "entity": {
                        "name": "`useCallback`\n",
                        "nameHtml": "<code>useCallback</code>\n",
                        "nameClean": "useCallback",
                        "description": "`useCallback` is a React Hook that lets you cache a function definition between re-renders.\n",
                        "descriptionHtml": "<code>useCallback</code> is a React Hook that lets you cache a function definition between re-renders.\n",
                        "descriptionClean": "useCallback is a React Hook that lets you cache a function definition between re-renders.",
                        "id": "usecallback",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const cachedFn = useCallback(fn, dependencies)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> cachedFn = <span class=\"hljs-title function_\">useCallback</span>(fn, dependencies)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useCallback"
                        },
                        "resources": [
                          {
                            "url": "https://www.joshwcomeau.com/react/usememo-and-usecallback/",
                            "title": "Understanding useMemo and useCallback"
                          }
                        ]
                      }
                    },
                    {
                      "count": 86,
                      "id": "usememo",
                      "percentageQuestion": 11.91,
                      "percentageSurvey": 1.09,
                      "entity": {
                        "name": "`useMemo`\n",
                        "nameHtml": "<code>useMemo</code>\n",
                        "nameClean": "useMemo",
                        "description": "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.\n",
                        "descriptionHtml": "<code>useMemo</code> is a React Hook that lets you cache the result of a calculation between re-renders.\n",
                        "descriptionClean": "useMemo is a React Hook that lets you cache the result of a calculation between re-renders.",
                        "id": "usememo",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const cachedValue = useMemo(calculateValue, dependencies)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> cachedValue = <span class=\"hljs-title function_\">useMemo</span>(calculateValue, dependencies)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useMemo"
                        },
                        "resources": [
                          {
                            "url": "https://www.joshwcomeau.com/react/usememo-and-usecallback/",
                            "title": "Understanding useMemo and useCallback"
                          }
                        ]
                      }
                    },
                    {
                      "count": 56,
                      "id": "excessive_complexity",
                      "percentageQuestion": 7.76,
                      "percentageSurvey": 0.71,
                      "entity": {
                        "name": "Excessive complexity",
                        "nameClean": "Excessive complexity",
                        "description": "Too much complexity",
                        "descriptionClean": "Too much complexity",
                        "id": "excessive_complexity",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 45,
                      "id": "excessive_rerendering",
                      "percentageQuestion": 6.23,
                      "percentageSurvey": 0.57,
                      "entity": {
                        "name": "Excessive rerendering",
                        "nameClean": "Excessive rerendering",
                        "id": "excessive_rerendering",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 43,
                      "id": "state_management",
                      "percentageQuestion": 5.96,
                      "percentageSurvey": 0.55,
                      "entity": {
                        "name": "State management",
                        "nameClean": "State management",
                        "id": "state_management",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 43,
                      "id": "useLayoutEffect",
                      "percentageQuestion": 5.96,
                      "percentageSurvey": 0.55,
                      "entity": {
                        "name": "`useLayoutEffect`\n",
                        "nameHtml": "<code>useLayoutEffect</code>\n",
                        "nameClean": "useLayoutEffect",
                        "id": "useLayoutEffect",
                        "entityType": "feature"
                      }
                    },
                    {
                      "count": 39,
                      "id": "usereducer",
                      "percentageQuestion": 5.4,
                      "percentageSurvey": 0.5,
                      "entity": {
                        "name": "`useReducer`\n",
                        "nameHtml": "<code>useReducer</code>\n",
                        "nameClean": "useReducer",
                        "id": "usereducer",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const [state, dispatch] = useReducer(reducer, initialArg, init?)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> [state, dispatch] = <span class=\"hljs-title function_\">useReducer</span>(reducer, initialArg, init?)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useReducer"
                        }
                      }
                    },
                    {
                      "count": 35,
                      "id": "memo",
                      "percentageQuestion": 4.85,
                      "percentageSurvey": 0.44,
                      "entity": {
                        "name": "`memo`",
                        "nameHtml": "<code>memo</code>",
                        "nameClean": "memo",
                        "description": "`memo` lets you skip re-rendering a component when its props are unchanged.\n",
                        "descriptionHtml": "<code>memo</code> lets you skip re-rendering a component when its props are unchanged.\n",
                        "descriptionClean": "memo lets you skip re-rendering a component when its props are unchanged.",
                        "id": "memo",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const MemoizedComponent = memo(SomeComponent, arePropsEqual?)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MemoizedComponent</span> = <span class=\"hljs-title function_\">memo</span>(<span class=\"hljs-title class_\">SomeComponent</span>, arePropsEqual?)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/memo"
                        },
                        "resources": [
                          {
                            "url": "https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/",
                            "title": "A (Mostly) Complete Guide to React Rendering Behavior"
                          },
                          {
                            "url": "https://overreacted.io/before-you-memo/",
                            "title": "Before You memo()"
                          }
                        ]
                      }
                    },
                    {
                      "count": 7148,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 90.83
                    },
                    {
                      "count": 528,
                      "id": "other_answers",
                      "percentageQuestion": 73.16,
                      "percentageSurvey": 6.71,
                      "groupedBuckets": [
                        {
                          "count": 183,
                          "id": "overlimit_answers",
                          "percentageQuestion": 25.35,
                          "percentageSurvey": 2.34
                        },
                        {
                          "count": 117,
                          "id": "cutoff_answers",
                          "percentageQuestion": 16.23,
                          "percentageSurvey": 1.47
                        },
                        {
                          "count": 228,
                          "id": "no_match",
                          "percentageQuestion": 31.58,
                          "percentageSurvey": 2.9
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}