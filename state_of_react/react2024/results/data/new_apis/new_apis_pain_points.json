{
  "dataAPI": {
    "surveys": {
      "state_of_react": {
        "react2024": {
          "new_apis": {
            "new_apis_pain_points": {
              "id": "new_apis_pain_points",
              "comments": {
                "currentEdition": {
                  "count": 1
                }
              },
              "freeform": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 10,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 322,
                    "percentageSurvey": 4.09,
                    "total": 7870
                  },
                  "buckets": [
                    {
                      "count": 63,
                      "id": "react_server_components",
                      "percentageQuestion": 19.57,
                      "percentageSurvey": 0.8,
                      "entity": {
                        "name": "React Server Components",
                        "nameClean": "React Server Components",
                        "id": "react_server_components",
                        "entityType": "feature",
                        "homepage": {
                          "url": "https://nextjs.org/docs/getting-started/react-essentials#server-components"
                        },
                        "resources": [
                          {
                            "url": "https://www.joshwcomeau.com/react/server-components/",
                            "title": "Making Sense of React Server Components"
                          }
                        ]
                      }
                    },
                    {
                      "count": 35,
                      "id": "excessive_complexity",
                      "percentageQuestion": 10.87,
                      "percentageSurvey": 0.44,
                      "entity": {
                        "name": "Excessive complexity",
                        "nameClean": "Excessive complexity",
                        "description": "Too much complexity",
                        "descriptionClean": "Too much complexity",
                        "id": "excessive_complexity",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 27,
                      "id": "form_issues",
                      "percentageQuestion": 8.39,
                      "percentageSurvey": 0.34,
                      "entity": {
                        "name": "Form issues",
                        "nameClean": "Form issues",
                        "id": "form_issues",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 23,
                      "id": "nextjs_issues",
                      "percentageQuestion": 7.14,
                      "percentageSurvey": 0.29,
                      "entity": {
                        "name": "Next.js issues",
                        "nameClean": "Next.js issues",
                        "id": "nextjs_issues",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 21,
                      "id": "server_client_issues",
                      "percentageQuestion": 6.52,
                      "percentageSurvey": 0.27,
                      "entity": {
                        "name": "Frontend and backend integration",
                        "nameClean": "Frontend and backend integration",
                        "id": "server_client_issues",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 20,
                      "id": "suspense",
                      "percentageQuestion": 6.21,
                      "percentageSurvey": 0.25,
                      "entity": {
                        "name": "`<Suspense>`\n",
                        "nameHtml": "<code>&lt;Suspense&gt;</code>\n",
                        "nameClean": "Suspense",
                        "id": "suspense",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "<Suspense fallback={<Loading />}>\n  <SomeComponent />\n</Suspense>\n",
                          "codeHighlighted": "&lt;<span class=\"hljs-title class_\">Suspense</span> fallback={&lt;Loading /&gt;}&gt;\n  &lt;SomeComponent /&gt;\n&lt;/<span class=\"hljs-title class_\">Suspense</span>&gt;"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/Suspense"
                        }
                      }
                    },
                    {
                      "count": 18,
                      "id": "server_actions",
                      "percentageQuestion": 5.59,
                      "percentageSurvey": 0.23,
                      "entity": {
                        "name": "Server Actions",
                        "nameClean": "Server Actions",
                        "id": "server_actions",
                        "entityType": "feature",
                        "example": {
                          "language": "js",
                          "code": "export default function ServerComponent() {\n  async function myAction() {\n    'use server'\n    // ...\n  }\n}\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ServerComponent</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myAction</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-string\">&#x27;use server&#x27;</span>\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}"
                        },
                        "homepage": {
                          "url": "https://nextjs.org/docs/app/api-reference/functions/server-actions"
                        }
                      }
                    },
                    {
                      "count": 16,
                      "id": "useactionstate",
                      "percentageQuestion": 4.97,
                      "percentageSurvey": 0.2,
                      "entity": {
                        "name": "`useActionState` (formerly `useFormState`)\n",
                        "nameHtml": "<code>useActionState</code> (formerly <code>useFormState</code>)\n",
                        "nameClean": "useActionState (formerly useFormState)",
                        "description": "`useActionState` is a Hook that allows you to update state based on the result of a form action.\n",
                        "descriptionHtml": "<code>useActionState</code> is a Hook that allows you to update state based on the result of a form action.\n",
                        "descriptionClean": "useActionState is a Hook that allows you to update state based on the result of a form action.",
                        "id": "useactionstate",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const [state, formAction] = useActionState(fn, initialState, permalink?);\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> [state, formAction] = <span class=\"hljs-title function_\">useActionState</span>(fn, initialState, permalink?);"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useActionState"
                        }
                      }
                    },
                    {
                      "count": 12,
                      "id": "ssr",
                      "percentageQuestion": 3.73,
                      "percentageSurvey": 0.15,
                      "entity": {
                        "name": "SSR",
                        "nameClean": "SSR",
                        "description": "Server-side rendering issues",
                        "descriptionClean": "Server-side rendering issues",
                        "id": "ssr",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 12,
                      "id": "useoptimistic",
                      "percentageQuestion": 3.73,
                      "percentageSurvey": 0.15,
                      "entity": {
                        "name": "`useOptimistic`\n",
                        "nameHtml": "<code>useOptimistic</code>\n",
                        "nameClean": "useOptimistic",
                        "description": "`useOptimistic` is a React Hook that lets you optimistically update the UI.\n",
                        "descriptionHtml": "<code>useOptimistic</code> is a React Hook that lets you optimistically update the UI.\n",
                        "descriptionClean": "useOptimistic is a React Hook that lets you optimistically update the UI.",
                        "id": "useoptimistic",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const [optimisticState, addOptimistic] = useOptimistic(state, updateFn);\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> [optimisticState, addOptimistic] = <span class=\"hljs-title function_\">useOptimistic</span>(state, updateFn);"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useOptimistic"
                        }
                      }
                    },
                    {
                      "count": 7548,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 95.91
                    },
                    {
                      "count": 284,
                      "id": "other_answers",
                      "percentageQuestion": 88.13,
                      "percentageSurvey": 3.57,
                      "groupedBuckets": [
                        {
                          "count": 22,
                          "id": "overlimit_answers",
                          "percentageQuestion": 6.84,
                          "percentageSurvey": 0.28
                        },
                        {
                          "count": 130,
                          "id": "cutoff_answers",
                          "percentageQuestion": 40.3,
                          "percentageSurvey": 1.61
                        },
                        {
                          "count": 132,
                          "id": "no_match",
                          "percentageQuestion": 40.99,
                          "percentageSurvey": 1.68
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}