{
  "dataAPI": {
    "surveys": {
      "state_of_react": {
        "react2024": {
          "state_management": {
            "state_management_pain_points": {
              "id": "state_management_pain_points",
              "comments": {
                "currentEdition": {
                  "count": 1
                }
              },
              "freeform": {
                "currentEdition": {
                  "_metadata": {
                    "axis1Sort": {
                      "property": "count",
                      "order": "desc"
                    },
                    "limit": 20,
                    "cutoff": 10
                  },
                  "completion": {
                    "count": 468,
                    "percentageSurvey": 5.95,
                    "total": 7870
                  },
                  "buckets": [
                    {
                      "count": 85,
                      "id": "excessive_complexity",
                      "percentageQuestion": 18.16,
                      "percentageSurvey": 1.08,
                      "entity": {
                        "name": "Excessive complexity",
                        "nameClean": "Excessive complexity",
                        "description": "Too much complexity",
                        "descriptionClean": "Too much complexity",
                        "id": "excessive_complexity",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 84,
                      "id": "redux_issues",
                      "percentageQuestion": 17.95,
                      "percentageSurvey": 1.07,
                      "entity": {
                        "name": "Redux issues",
                        "nameClean": "Redux issues",
                        "id": "redux_issues",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 58,
                      "id": "too_much_boilerplate",
                      "percentageQuestion": 12.39,
                      "percentageSurvey": 0.74,
                      "entity": {
                        "name": "Excessive boilerplate",
                        "nameClean": "Excessive boilerplate",
                        "description": "Too much boilerplate required",
                        "descriptionClean": "Too much boilerplate required",
                        "id": "too_much_boilerplate",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 34,
                      "id": "excesssive_rerendering",
                      "percentageQuestion": 7.26,
                      "percentageSurvey": 0.43,
                      "entity": {
                        "name": "Excessive re-renderings",
                        "nameClean": "Excessive re-renderings",
                        "id": "excesssive_rerendering",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 29,
                      "id": "global_state_management",
                      "percentageQuestion": 6.2,
                      "percentageSurvey": 0.37,
                      "entity": {
                        "name": "Global state management",
                        "nameClean": "Global state management",
                        "id": "global_state_management",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 25,
                      "id": "synchronization_issues",
                      "percentageQuestion": 5.34,
                      "percentageSurvey": 0.32,
                      "entity": {
                        "name": "Synchronization issues",
                        "nameClean": "Synchronization issues",
                        "id": "synchronization_issues",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 23,
                      "id": "performance",
                      "percentageQuestion": 4.91,
                      "percentageSurvey": 0.29,
                      "entity": {
                        "name": "Performance",
                        "nameClean": "Performance",
                        "description": "Performance issues",
                        "descriptionClean": "Performance issues",
                        "id": "performance",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 20,
                      "id": "usestate",
                      "percentageQuestion": 4.27,
                      "percentageSurvey": 0.25,
                      "entity": {
                        "name": "`useState`\n",
                        "nameHtml": "<code>useState</code>\n",
                        "nameClean": "useState",
                        "description": "`useState` is a React Hook that lets you add a state variable to your component.\n",
                        "descriptionHtml": "<code>useState</code> is a React Hook that lets you add a state variable to your component.\n",
                        "descriptionClean": "useState is a React Hook that lets you add a state variable to your component.",
                        "id": "usestate",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const [state, setState] = useState(initialState);\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> [state, setState] = <span class=\"hljs-title function_\">useState</span>(initialState);"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useState"
                        }
                      }
                    },
                    {
                      "count": 14,
                      "id": "verbosity",
                      "percentageQuestion": 2.99,
                      "percentageSurvey": 0.18,
                      "entity": {
                        "name": "Excessive verbosity",
                        "nameClean": "Excessive verbosity",
                        "description": "APIs that are overly verbose",
                        "descriptionClean": "APIs that are overly verbose",
                        "id": "verbosity",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 12,
                      "id": "mobx_issues",
                      "percentageQuestion": 2.56,
                      "percentageSurvey": 0.15,
                      "entity": {
                        "name": "MobX issues",
                        "nameClean": "MobX issues",
                        "id": "mobx_issues",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 11,
                      "id": "maintenance",
                      "percentageQuestion": 2.35,
                      "percentageSurvey": 0.14,
                      "entity": {
                        "name": "Maintenance",
                        "nameClean": "Maintenance",
                        "id": "maintenance",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 11,
                      "id": "usecontext",
                      "percentageQuestion": 2.35,
                      "percentageSurvey": 0.14,
                      "entity": {
                        "name": "`useContext`\n",
                        "nameHtml": "<code>useContext</code>\n",
                        "nameClean": "useContext",
                        "description": "`useContext` is a React Hook that lets you read and subscribe to context from your component.\n",
                        "descriptionHtml": "<code>useContext</code> is a React Hook that lets you read and subscribe to context from your component.\n",
                        "descriptionClean": "useContext is a React Hook that lets you read and subscribe to context from your component.",
                        "id": "usecontext",
                        "entityType": "feature",
                        "example": {
                          "language": "jsx",
                          "code": "const value = useContext(SomeContext)\n",
                          "codeHighlighted": "<span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">SomeContext</span>)"
                        },
                        "homepage": {
                          "url": "https://react.dev/reference/react/useContext"
                        }
                      }
                    },
                    {
                      "count": 10,
                      "id": "tough_learning_curve",
                      "percentageQuestion": 2.14,
                      "percentageSurvey": 0.13,
                      "entity": {
                        "name": "Tough learning curve",
                        "nameClean": "Tough learning curve",
                        "id": "tough_learning_curve",
                        "entityType": "default"
                      }
                    },
                    {
                      "count": 7402,
                      "id": "no_answer",
                      "percentageQuestion": 0,
                      "percentageSurvey": 94.05
                    },
                    {
                      "count": 296,
                      "id": "other_answers",
                      "percentageQuestion": 63.2,
                      "percentageSurvey": 3.76,
                      "groupedBuckets": [
                        {
                          "count": 128,
                          "id": "cutoff_answers",
                          "percentageQuestion": 27.3,
                          "percentageSurvey": 1.63
                        },
                        {
                          "count": 168,
                          "id": "no_match",
                          "percentageQuestion": 35.9,
                          "percentageSurvey": 2.13
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}